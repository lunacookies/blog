@function hsb($h-hsb, $s-hsb, $b-hsb, $a: 1) {
  @if $b-hsb == 0 {
    @return hsla(0, 0, 0, $a);
  } @else {
    $l-hsl: ($b-hsb/2) * (2 - ($s-hsb/100));
    $s-hsl: ($b-hsb * $s-hsb) / if($l-hsl < 50, $l-hsl * 2, 200 - $l-hsl * 2);
    @return hsla($h-hsb, $s-hsl, $l-hsl, $a);
  }
}

@mixin element-border {
  border-radius: 0.25rem;
  border: 1px solid hsb(0, 0, 90);
  @media (prefers-color-scheme: dark) {
    border: 1px solid hsb(0, 0, 20);
  }
}

@mixin small {
  font-family: $caption-font;
  font-size: 0.85rem;
  letter-spacing: 0.01em;
  line-height: 1.4;
}

@mixin small-caps {
  font-variant-caps: all-small-caps;
  letter-spacing: 0.05em;
}

@mixin monospace {
  font-family: $mono-font;
  font-feature-settings:
  // monocular g
    "ss02",
    // centred asterisk
    "ss11",
    // “boring” curly braces
    "ss12";
  font-size: 0.8em;
}

*,
::before,
::after {
  box-sizing: border-box;
  color: inherit;
  font: inherit;
  margin: 0;
  padding: 0;
  text-decoration: inherit;
}

em {
  font-style: italic;
}
strong {
  font-weight: 600;
}

html {
  font-size: 24px;
  @media (max-width: 700px) {
    font-size: 20px;
  }

  text-size-adjust: 100%;

  // dark scroll bars in OS dark mode
  color-scheme: light dark;
}

$dark-fg-hue: 55;

$light-bg: hsb(0, 0, 97);
$dark-bg: hsb(0, 0, 12);

$light-fg: black;
$dark-fg: hsb($dark-fg-hue, 7, 90);

$light-faded: hsb(0, 0, 55);
$dark-faded: hsb(120, 5, 46);

$text-font: "guyot-press-2", ui-serif, Georgia, serif;

$caption-font: "guyot-press-3", $text-font;
$subhead-font: "guyot-press-1", $text-font;
$display-font: "guyot-headline", $text-font;

$mono-font: input-mono, ui-monospace, Consolas, Menlo, DejaVu Sans Mono,
  monospace;
$narrow-mono-font: input-mono-narrow, $mono-font;

html {
  background-color: hsb(0, 0, 50);
  @media (prefers-color-scheme: dark) {
    background-color: hsb(0, 0, 20);
  }
}

body {
  font-family: $text-font;
  font-variant-numeric: proportional-nums oldstyle-nums;
  line-height: 1.3;
  hyphens: auto;

  max-width: 42rem;
  margin: {
    left: auto;
    right: auto;
  }

  padding: 2rem;
  @media (max-width: 700px) {
    padding: 2rem 1rem;
  }

  background-color: $light-bg;
  color: $light-fg;
  @media (prefers-color-scheme: dark) {
    background-color: $dark-bg;
    color: $dark-fg;
  }
}

body * + * {
  margin-top: 1em;
}

main {
  max-width: 25rem;
}

h2 {
  margin-top: 2rem;
  font-weight: 700;
  hyphens: none;
}

header {
  margin-bottom: 8rem;
  hyphens: none;

  > h1 {
    font-family: $display-font;
    font-weight: 600;
    margin-bottom: 0.5rem;

    font-size: 2.5rem;
    line-height: 1.1;
    @media (max-width: 700px) {
      font-size: 2rem;
      line-height: 1.2;
    }
  }

  > .subtitle {
    font-family: $subhead-font;
    font-size: 1.5rem;
    line-height: 1.3;
    margin-top: 0;
    max-width: 30rem;
  }
}

.signature {
  text-align: right;
  margin-top: 2rem;
}

footer {
  @include small();
  font-style: italic;
  margin-top: 8rem;
  max-width: 20rem;
}

.post {
  > .title,
  > .date {
    margin-top: 0;
  }

  & + & {
    margin-top: 0.5rem;
  }
}

@mixin text-shadow($background) {
  $shadows: ();

  @for $x from -3 through 3 {
    @for $y from -1 through 1 {
      // A shadow at 0px, 0px has no effect, so we omit it.
      @if not($x==0 and $y==0) {
        $shadows: append(
          $shadows,
          unquote("#{$x}px #{$y}px #{$background}"),
          $separator: comma
        );
      }
    }
  }

  text-shadow: $shadows;
}

a {
  color: hsb(320, 100, 60);
  @media (prefers-color-scheme: dark) {
    color: hsb(210, 30, 80);
  }

  background-image: linear-gradient(currentColor, currentColor);
  @include text-shadow($light-bg);
  @media (prefers-color-scheme: dark) {
    @include text-shadow($dark-bg);
  }

  background-repeat: no-repeat;
  background-position: 0 95%;
  background-size: 100% 1px;

  &:active {
    opacity: 0.5;
  }
}

blockquote {
  @include small();
  padding-left: 4rem;
  margin: {
    top: 1.5rem;
    bottom: 1.5rem;
  }
}

abbr {
  @include small-caps();
}

ul,
ol {
  list-style-type: none;
  margin-left: 1.5em;
}

ul > li::before {
  content: "·";
  font-weight: 700;
  position: absolute;
  width: 1em;
  margin-left: -1.5em;
}

ol > li {
  counter-increment: ol;
}

ol > li::before {
  content: counter(ol) ".";
  position: absolute;
  width: 1em;
  margin-left: -1.5em;
}

ul *,
ol * {
  margin-top: 0;
}

img,
video {
  display: block;
  max-width: 100%;
  @include element-border();

  margin: {
    top: 1.5rem;
    bottom: 1.5rem;
  }
}

table {
  margin: {
    left: auto;
    right: auto;
  }

  border-collapse: collapse;

  // gap between columns
  td + td,
  th + th {
    padding-left: 1rem;
  }

  thead > tr > th {
    font-weight: 600;
  }

  // border with space above and below
  thead > tr > th {
    border-bottom: 1px solid;
    padding-bottom: 0.5rem;
  }
  tbody > :first-child > td {
    padding-top: 0.5rem;
  }
}

code {
  @include monospace();
  hyphens: none;
}
pre {
  > code {
    display: block;
    padding: 0.5rem;
    overflow-x: auto;

    // Here we use em instead of rem so code blocks
    // in e.g. blockquotes get smaller.
    font-size: 0.65em;
    line-height: 1.4;
    @media (max-width: 600px) {
      font-family: $narrow-mono-font;
    }
  }

  @include element-border();
  background-color: hsb(0, 0, 99);
  @media (prefers-color-scheme: dark) {
    background-color: hsb(0, 0, 10);
  }
}

// keywords
pre .keyword,
pre .operator,
pre .rule,
pre.language-ini .header,
pre.language-ini .punctuation {
  color: hsb(210, 100, 80);
}

// types
pre .class-name,
pre.language-css .property,
pre.language-scss .property,
pre.language-ini .attr-name {
  color: hsb(230, 45, 65);
}

// numbers
pre .number {
  color: hsb(40, 100, 80);
}

// constants
pre .constant,
pre.language-scss .variable {
  color: hsb(35, 100, 80);
}

// preprocessor directives
pre .directive,
pre .directive-hash,
pre .macro,
pre.language-scss .keyword {
  color: hsb(180, 40, 50);
}

// strings
pre .string,
pre.language-ini .attr-value {
  color: hsb(110, 45, 50);
}

// lifetimes
pre .lifetime-annotation {
  color: hsb(75, 100, 50);
}

@media (prefers-color-scheme: dark) {
  pre {
    color: hsb($dark-fg-hue, 10, 80);
  }

  // keywords
  pre .keyword,
  pre .operator,
  pre .rule,
  pre.language-ini .header,
  pre.language-ini .punctuation {
    color: hsb(210, 30, 80);
  }

  // types
  pre .class-name,
  pre.language-css .property,
  pre.language-scss .property,
  pre.language-ini .attr-name {
    color: hsb(220, 25, 65);
  }

  // numbers
  pre .number {
    color: hsb(40, 100, 80);
  }

  // constants
  pre .constant,
  pre.language-scss .variable {
    color: hsb(35, 100, 100);
  }

  // functions
  pre .function {
    color: hsb($dark-fg-hue, 20, 100);
  }

  // preprocessor directives
  pre .directive,
  pre .directive-hash,
  pre .macro,
  pre.language-scss .keyword {
    color: hsb(180, 40, 65);
  }

  // strings
  pre .string,
  pre.language-ini .attr-value {
    color: hsb(110, 30, 65);
  }

  // lifetimes
  pre .lifetime-annotation {
    color: hsb(75, 95, 65);
  }
}

pre .comment {
  font-weight: bold;
}

@import "term.scss";
